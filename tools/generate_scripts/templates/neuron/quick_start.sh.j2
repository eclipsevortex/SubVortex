#!/bin/bash

set -euo pipefail

SERVICE_NAME={{ name }}
PROJECT_WORKING_DIR="${SUBVORTEX_WORKING_DIR:-}"

# Fallback to script location if PROJECT_WORKING_DIR is not set
if [[ -z "$PROJECT_WORKING_DIR" ]]; then
  SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  PROJECT_WORKING_DIR="$(realpath "$SCRIPT_PATH/../../../")"
  echo "üìÅ PROJECT_WORKING_DIR not set ‚Äî using fallback: $PROJECT_WORKING_DIR"
else
  echo "üìÅ Using PROJECT_WORKING_DIR from environment: $PROJECT_WORKING_DIR"
fi

NEURON_WORKING_DIR="$PROJECT_WORKING_DIR/subvortex/{{ neuron }}"

# Load some utils
source "$NEURON_WORKING_DIR/../scripts/utils.sh"

# Help function
show_help() {
    echo "Usage: $0 [--execution=process|container|service]"
    echo
    echo "Description:"
    echo "  This script start the validator's components"
    echo
    echo "Options:"
    echo "  --execution   Specify the execution method (default: service)"
    echo "  --help        Show this help message"
    exit 0
}

OPTIONS="e:h"
LONGOPTIONS="execution:,help:"

EXECUTION=service

# Parse arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        -e |--execution)
            EXECUTION="$2"
            shift 2
        ;;
        -h | --help)
            show_help
            exit 0
        ;;
        --)
            shift
            break
        ;;
        *)
            echo "Unrecognized option '$1'"
            exit 1
        ;;
    esac
done

# Check maandatory args
check_required_args EXECUTION

echo "üîß Running setup for {{ neuron }} components..."
{% for component in ordered_components %}
"$NEURON_WORKING_DIR/{{ component }}/scripts/{{ component }}_setup.sh" --execution $EXECUTION
{% endfor %}

echo "üöÄ Starting {{ neuron }} components..."
{% for component in ordered_components %}
"$NEURON_WORKING_DIR/{{ component }}/scripts/{{ component }}_start.sh" --execution $EXECUTION
{% endfor %}