#!/bin/bash

set -euo pipefail

SERVICE_NAME={{ name }}
PROJECT_WORKING_DIR="${SUBVORTEX_WORKING_DIR:-}"

echo "🔧 Starting $SERVICE_NAME setup..."

# Fallback to script location if PROJECT_WORKING_DIR is not set
if [[ -z "$PROJECT_WORKING_DIR" ]]; then
  SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  PROJECT_WORKING_DIR="$(realpath "$SCRIPT_PATH/../../../../../")"
  echo "📁 PROJECT_WORKING_DIR not set — using fallback: $PROJECT_WORKING_DIR"
else
  echo "📁 Using PROJECT_WORKING_DIR from environment: $PROJECT_WORKING_DIR"
fi

SERVICE_WORKING_DIR="$PROJECT_WORKING_DIR/subvortex/{{ neuron }}/{{ component }}"

# --- Load environment variables from .env file ---
ENV_FILE="$SERVICE_WORKING_DIR/.env"

if [[ -f "$ENV_FILE" ]]; then
  echo "🌱 Loading environment variables from $ENV_FILE"
  set -a
  # shellcheck disable=SC1090
  source "$ENV_FILE"
  set +a
else
  echo "⚠️ No .env file found at $ENV_FILE"
fi

{% if type == 'python' %}
# --- Python project setup ---
# Set the venv dir
VENV_DIR="$SERVICE_WORKING_DIR/venv"

if [[ ! -d "$VENV_DIR" ]]; then
  echo "🐍 Creating Python virtual environment..."
  python3 -m venv "$VENV_DIR"
fi

echo "🐍 Activating virtual environment..."
source "$VENV_DIR/bin/activate"

echo "📦 Installing Python dependencies..."
pip install -r $SERVICE_WORKING_DIR/requirements.txt

echo "📚 Installing Python project in editable mode..."
pip install -e "$PROJECT_WORKING_DIR"

echo "🧘 Deactivating virtual environment..."
deactivate

{% elif type == 'package' %}
{% if provision_hooks %}
{{ provision_hooks }}
{% endif %}

# --- If a systemd unit for the package is running, stop and mask it ---
if systemctl list-units --type=service --all | grep -q "{{ package_name }}.service"; then
  if systemctl is-active --quiet "{{ package_name }}.service"; then
    echo "🛑 Stopping running systemd service: {{ package_name }}.service"
    sudo systemctl stop "{{ package_name }}.service"
  fi
  echo "🚫 Masking systemd service to prevent autostart: {{ package_name }}.service"
  sudo systemctl mask "{{ package_name }}.service"
else
  echo "ℹ️ No active systemd service found for {{ package_name }}.service"
fi

# --- Handle optional configuration templates ---
{% if configs %}
CONFIG_DIR="$SERVICE_WORKING_DIR/deployment/templates"

{% for key, cfg in configs.items() %}
{% set ext = cfg.ext %}
{% set template_file = cfg.get('template') or ("subvortex-" ~ neuron ~ "-" ~ component ~ "." ~ ext) %}
TEMPLATE_FILE="$CONFIG_DIR/{{ template_file }}"
DEST_FILE="{{ cfg.destination }}"

if [[ -f "$TEMPLATE_FILE" ]]; then
  echo "📄 Found template: $TEMPLATE_FILE → copying to $DEST_FILE"
  cp "$TEMPLATE_FILE" "$DEST_FILE"
else
  echo "⚠️ Template not found: $TEMPLATE_FILE — will attempt to patch $DEST_FILE if it exists"
fi

if [[ -f "$DEST_FILE" ]]; then
  {% if cfg.overrides %}
  echo "🔧 Applying overrides to $DEST_FILE"
  {% for k, v in cfg.overrides.items() %}
  if grep -q "^{{ k | replace(' ', '\\s*') }}\s*" "$DEST_FILE"; then
    sed -i "s|^{{ k | replace(' ', '[[:space:]]*') }}[[:space:]]*.*|{{ k }} {{ v }}|" "$DEST_FILE"
  else
    echo "{{ k }} {{ v }}" >> "$DEST_FILE"
  fi
  {% endfor %}
  {% endif %}
else
  echo "🛑 Destination file $DEST_FILE does not exist — cannot apply overrides"
fi
{% endfor %}
{% else %}
echo "ℹ️ No custom config files to apply."
{% endif %}

{% elif type == 'binary' %}
# --- Binary service setup ---
echo "📂 Checking binary directory..."
BIN_DIR="$SERVICE_WORKING_DIR/bin"
if [[ -f "$BIN_DIR/{{ binary_name }}" ]]; then
  echo "🔗 Installing {{ binary_name }} to /usr/local/bin"
  sudo cp "$BIN_DIR/{{ binary_name }}" /usr/local/bin/
  sudo chmod +x /usr/local/bin/{{ binary_name }}
else
  echo "⚠️ Binary {{ binary_name }} not found. Please build it first."
fi

{% elif type == 'system' %}
# --- No setup needed, maybe system-managed ---
echo "⚙️ System-managed service. No setup required."
# Optional: validate configuration or emit message
{% else %}
echo "❌ Unknown service type: '{{ type }}'"
exit 1
{% endif %}


echo "✅ $SERVICE_NAME installed successfully."