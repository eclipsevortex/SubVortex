#!/bin/bash

set -euo pipefail

SERVICE_NAME={{ name }}
PROJECT_WORKING_DIR="${SUBVORTEX_WORKING_DIR:-}"

echo "üöÄ Starting $SERVICE_NAME..."

# Fallback to script location if PROJECT_WORKING_DIR is not set
if [[ -z "$PROJECT_WORKING_DIR" ]]; then
  SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  PROJECT_WORKING_DIR="$(realpath "$SCRIPT_PATH/../../../../../")"
  echo "üìÅ PROJECT_WORKING_DIR not set ‚Äî using fallback: $PROJECT_WORKING_DIR"
else
  echo "üìÅ Using PROJECT_WORKING_DIR from environment: $PROJECT_WORKING_DIR"
fi

SERVICE_WORKING_DIR="$PROJECT_WORKING_DIR/subvortex/{{ neuron }}/{{ component }}"

{% if type == 'python' %}
# Set the venv dir
VENV_DIR="$SERVICE_WORKING_DIR/venv"

echo "üêç Activating virtual environment..."
source "$VENV_DIR/bin/activate"

echo "üîç Loading environment variables from .env..."
export $(grep -v '^#' $SERVICE_WORKING_DIR/.env | xargs)

# Start or reload process
echo "üîç Checking $SERVICE_NAME..."
if pm2 describe "$SERVICE_NAME" >/dev/null 2>&1; then
    echo "üîÅ Restarting $SERVICE_NAME with updated CLI args: ${ARGS[*]}"
    pm2 restart "$SERVICE_NAME" --update-env
else
    echo "üöÄ No existing process found ‚Äî starting $SERVICE_NAME via PM2..."
    pm2 start "$SERVICE_WORKING_DIR/src/main.py" \
    --name "$SERVICE_NAME" \
    --cwd "$SERVICE_WORKING_DIR" \
    --interpreter "$VENV_DIR/bin/python3"
fi

{% elif type == 'package' %}
echo "üîç Checking $SERVICE_NAME..."
if pm2 describe "$SERVICE_NAME" >/dev/null 2>&1; then
    if pm2 status "$SERVICE_NAME" | grep -q "online"; then
        echo "üîÅ $SERVICE_NAME is already running ‚Äî reloading..."
        pm2 reload "$SERVICE_NAME" --update-env
    else
        echo "‚ôªÔ∏è $SERVICE_NAME exists but not running ‚Äî restarting..."
        pm2 restart "$SERVICE_NAME" --update-env
    fi
else
    echo "üöÄ Starting $SERVICE_NAME as {{ user }}:{{ group }}..."
    sudo pm2 start redis-server \
        --name "$SERVICE_NAME" \
        --uid "{{ user }}" \
        --gid "{{ group }}" \
        --cwd "$SERVICE_WORKING_DIR" 
        -- "/etc/redis/redis.conf" \
        --daemonize no
fi

{% elif type == 'system' %}
# --- No start needed ---
{% else %}
echo "‚ùå Unknown service type: '{{ type }}'"
exit 1
{% endif %}

echo "‚úÖ $SERVICE_NAME started successfully."
