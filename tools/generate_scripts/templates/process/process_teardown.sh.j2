#!/bin/bash
w
set -euo pipefail

SERVICE_NAME={{ name }}
PROJECT_WORKING_DIR="${SUBVORTEX_WORKING_DIR:-}"

echo "🧹 Starting $SERVICE_NAME teardown..."

# Fallback to script location if PROJECT_WORKING_DIR is not set
if [[ -z "$PROJECT_WORKING_DIR" ]]; then
  SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  PROJECT_WORKING_DIR="$(realpath "$SCRIPT_PATH/../../../../../")"
  echo "📁 PROJECT_WORKING_DIR not set — using fallback: $PROJECT_WORKING_DIR"
else
  echo "📁 Using PROJECT_WORKING_DIR from environment: $PROJECT_WORKING_DIR"
fi

SERVICE_WORKING_DIR="$PROJECT_WORKING_DIR/subvortex/{{ neuron }}/{{ component }}"

# Stop and delete the PM2 process
echo "🔍 Checking $SERVICE_NAME..."
if pm2 describe "$SERVICE_NAME" >/dev/null 2>&1; then
    echo "🛑 Stopping process $SERVICE_NAME..."
    pm2 stop "$SERVICE_NAME"
    
    echo "🗑️ Deleting process $SERVICE_NAME..."
    pm2 delete "$SERVICE_NAME"
else
    echo "ℹ️ Process $SERVICE_NAME not found. Skipping stop/delete."
fi

{% if type == 'python' %}
# --- Python virtualenv cleanup ---
# Set the venv dir
VENV_DIR="$SERVICE_WORKING_DIR/venv"

echo "🔍 Checking for virtual environment..."
if [[ -d "$VENV_DIR" ]]; then
    echo "🧹 Removing virtual environment..."
    rm -rf "$VENV_DIR"
else
    echo "ℹ️ Virtual environment not found. Skipping removal."
fi

{% elif type == 'package' %}
# --- Package service cleanup ---
echo "📦 Removing package '{{ package_name }}'..."

if command -v apt-get &> /dev/null; then
    sudo apt-get purge -y {{ package_name }}
    sudo apt-get autoremove -y
elif command -v dnf &> /dev/null; then
    sudo dnf remove -y {{ package_name }}
elif command -v pacman &> /dev/null; then
    sudo pacman -Rns --noconfirm {{ package_name }}
else
    echo "⚠️ Unsupported package manager. Please uninstall {{ package_name }} manually."
fi

{% elif type == 'binary' %}
# --- Binary cleanup from /usr/local/bin ---
echo "🔍 Checking binary /usr/local/bin/{{ binary_name }}..."
if [[ -f "/usr/local/bin/{{ binary_name }}" ]]; then
    echo "🗑️ Removing binary {{ binary_name }} from /usr/local/bin"
    sudo rm -f "/usr/local/bin/{{ binary_name }}"
else
    echo "ℹ️ Binary {{ binary_name }} not found in /usr/local/bin. Skipping."
fi

{% elif type == 'system' %}
# --- System-managed service: no teardown needed ---
echo "⚙️ System-managed service: nothing to clean up."

{% else %}
echo "❌ Unknown service type '{{ type }}'. Cannot determine cleanup actions."
exit 1
{% endif %}

echo "✅ $SERVICE_NAME uninstalled successfully."