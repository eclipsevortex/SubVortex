#!/bin/bash

set -euo pipefail

SERVICE_NAME={{ name }}
PROJECT_WORKING_DIR="${SUBVORTEX_WORKING_DIR:-}"

if [[ "$EUID" -ne 0 ]]; then
  echo "🛑 Must be run as root. Re-running with sudo..."
  exec sudo "$0" "$@"
fi

echo "🔧 Starting $SERVICE_NAME setup..."

# Fallback to script location if PROJECT_WORKING_DIR is not set
if [[ -z "$PROJECT_WORKING_DIR" ]]; then
  SCRIPT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  PROJECT_WORKING_DIR="$(realpath "$SCRIPT_PATH/../../../../../")"
  echo "📁 PROJECT_WORKING_DIR not set — using fallback: $PROJECT_WORKING_DIR"
else
  echo "📁 Using PROJECT_WORKING_DIR from environment: $PROJECT_WORKING_DIR"
fi

SERVICE_FILE="/etc/systemd/system/$SERVICE_NAME.service"
SERVICE_WORKING_DIR="$PROJECT_WORKING_DIR/subvortex/{{ neuron }}/{{ component }}"
SERVICE_TEMPLATE="$SERVICE_WORKING_DIR/deployment/templates/$SERVICE_NAME.service"
SERVICE_LOG_DIR="/var/log/subvortex-{{ neuron }}"
TEMP_SERVICE_FILE="/tmp/$SERVICE_NAME.service"

# --- Load environment variables from .env file ---
ENV_FILE="$SERVICE_WORKING_DIR/.env"

if [[ -f "$ENV_FILE" ]]; then
  echo "🌱 Loading environment variables from $ENV_FILE"
  set -a
  # shellcheck disable=SC1090
  source "$ENV_FILE"
  set +a
else
  echo "⚠️ No .env file found at $ENV_FILE"
fi

{% if type == 'python' %}
# --- Python project setup ---
VENV_DIR="$SERVICE_WORKING_DIR/venv"

if [[ ! -d "$VENV_DIR" ]]; then
  echo "🐍 Creating Python virtual environment..."
  python3 -m venv "$VENV_DIR"
fi

echo "🐍 Activating virtual environment..."
source "$VENV_DIR/bin/activate"

echo "📦 Installing Python dependencies..."
pip install -r "$SERVICE_WORKING_DIR/requirements.txt"

echo "📚 Installing Python project in editable mode..."
pip install -e "$PROJECT_WORKING_DIR"

echo "🧘 Deactivating virtual environment..."
deactivate

{% elif type == 'package' %}
{% if provision_install %}
echo "🔧 Running provision install hook..."
{{ provision_install }}
{% endif %}

# --- Stop and mask default service to avoid conflict ---
if systemctl list-unit-files --quiet "{{ package_name }}.service"; then
  if systemctl is-active --quiet "{{ package_name }}.service"; then
    echo "🛑 Stopping running service: {{ package_name }}.service"
    systemctl stop "{{ package_name }}.service"
  fi
  echo "🚫 Masking {{ package_name }}.service"
  systemctl mask "{{ package_name }}.service"
fi

# --- Promote and patch system unit to /etc/systemd/system ---
CUSTOM_UNIT_PATH="/etc/systemd/system/$SERVICE_NAME.service"

# Prefer vendor-provided unit file from /lib/systemd/system
if [[ -f "/lib/systemd/system/{{ package_name }}.service" ]]; then
  BASE_UNIT_PATH="/lib/systemd/system/{{ package_name }}.service"
else
  BASE_UNIT_PATH=$(systemctl show -p FragmentPath {{ package_name }}.service | cut -d= -f2)
fi

if [[ -n "$BASE_UNIT_PATH" && -e "$BASE_UNIT_PATH" ]]; then
  echo "📄 Found base unit at: $BASE_UNIT_PATH"
  echo "📄 Copying to: $CUSTOM_UNIT_PATH"
  cp "$BASE_UNIT_PATH" "$CUSTOM_UNIT_PATH"

  echo "✏️ Patching Description and Alias"
  sed -i "s|^Description=.*|Description={{ description }}|" "$CUSTOM_UNIT_PATH"

  if grep -q "^Alias=" "$CUSTOM_UNIT_PATH"; then
    sed -i "s|^Alias=.*|Alias=$SERVICE_NAME.service|" "$CUSTOM_UNIT_PATH"
  else
    echo "Alias=$SERVICE_NAME.service" >> "$CUSTOM_UNIT_PATH"
  fi

  echo "✏️ Replacing PIDFile with /run/{{ package_name }}..pid"
  if grep -q "^PIDFile=" "$CUSTOM_UNIT_PATH"; then
    sed -i "s|^PIDFile=.*|PIDFile=/run/{{ package_name }}..pid|" "$CUSTOM_UNIT_PATH"
  else
    echo "PIDFile=/var/run/{{ package_name }}..pid" >> "$CUSTOM_UNIT_PATH"
  fi

  echo "✏️ Replacing ReadWritePaths inline"
  awk '
    BEGIN {
      replaced = 0;
      replacement = "ReadWritePaths=-/var/lib/redis -/var/log/redis -/run/redis -/var/log/subvortex-{{ neuron }}";
    }
    /^ReadWritePaths=/ {
      if (!replaced) {
        print replacement;
        replaced = 1;
      }
      next;
    }
    { print }
  ' "$CUSTOM_UNIT_PATH" > "$CUSTOM_UNIT_PATH.tmp" && mv "$CUSTOM_UNIT_PATH.tmp" "$CUSTOM_UNIT_PATH"

  chmod 644 "$CUSTOM_UNIT_PATH"
else
  echo "⚠️ Could not locate base unit file for {{ package_name }}.service"
fi

# --- Handle optional configuration templates ---
{% if configs %}
CONFIG_DIR="$SERVICE_WORKING_DIR/deployment/templates"

{% for key, cfg in configs.items() %}
{% set ext = cfg.ext %}
{% set template_file = cfg.get('template') or ("subvortex-" ~ neuron ~ "-" ~ component ~ "." ~ ext) %}
TEMPLATE_FILE="$CONFIG_DIR/{{ template_file }}"
DEST_FILE="{{ cfg.destination }}"

if [[ -f "$TEMPLATE_FILE" ]]; then
  echo "📄 Found template: $TEMPLATE_FILE → copying to $DEST_FILE"
  cp "$TEMPLATE_FILE" "$DEST_FILE"
else
  echo "⚠️ Template not found: $TEMPLATE_FILE — will attempt to patch $DEST_FILE if it exists"
fi

if [[ -f "$DEST_FILE" ]]; then
  {% if cfg.overrides %}
  echo "🔧 Applying overrides to $DEST_FILE"
  {% for k, v in cfg.overrides.items() %}
  if grep -q "^{{ k | replace(' ', '\\s*') }}\s*" "$DEST_FILE"; then
    sed -i "s|^{{ k | replace(' ', '[[:space:]]*') }}[[:space:]]*.*|{{ k }} {{ v }}|" "$DEST_FILE"
  else
    echo "{{ k }} {{ v }}" >> "$DEST_FILE"
  fi
  {% endfor %}
  {% endif %}
else
  echo "🛑 Destination file $DEST_FILE does not exist — cannot apply overrides"
fi
{% endfor %}
{% else %}
echo "ℹ️ No custom config files to apply."
{% endif %}

{% elif type == 'binary' %}
# --- Binary service setup ---
echo "📂 Checking binary directory..."
BIN_DIR="$SERVICE_WORKING_DIR/bin"
if [[ -f "$BIN_DIR/{{ binary_name }}" ]]; then
  echo "🔗 Installing {{ binary_name }} to /usr/local/bin"
  cp "$BIN_DIR/{{ binary_name }}" /usr/local/bin/
  chmod +x /usr/local/bin/{{ binary_name }}
else
  echo "⚠️ Binary {{ binary_name }} not found. Please build it first."
fi

{% elif type == 'system' %}
echo "⚙️ System-managed service. No setup required."
{% else %}
echo "❌ Unknown service type: '{{ type }}'"
exit 1
{% endif %}

echo "📁 Preparing log directory..."
mkdir -p "$SERVICE_LOG_DIR"
chown {{ user }}:{{ group }} "$SERVICE_LOG_DIR"

{% if log_prefix %}
# --- Create log files and adjust permissions ---
LOG_PREFIX="$SERVICE_LOG_DIR/{{ log_prefix }}"
echo "🔒 Adjusting permissions for logs with prefix: $LOG_PREFIX"

# Ensure the log directory exists
mkdir -p "$(dirname "$LOG_PREFIX")"

# Create the log files if they don't exist
touch "${LOG_PREFIX}.log" "${LOG_PREFIX}-error.log"

# Set correct ownership
chown {{ user }}:{{ group }} "${LOG_PREFIX}.log" "${LOG_PREFIX}-error.log"
{% endif %}

{% if generate_unit is not defined or generate_unit != false %}
echo "📝 Preparing systemd service file from template..."
sed "s|<WORKING_DIR>|$PROJECT_WORKING_DIR|g" "$SERVICE_TEMPLATE" > "$TEMP_SERVICE_FILE"

echo "📝 Installing systemd service file to $SERVICE_FILE..."
mv "$TEMP_SERVICE_FILE" "$SERVICE_FILE"

chmod 644 "$SERVICE_FILE"
{% else %}
echo "ℹ️ Skipping systemd service file generation (generate_unit=false)"
{% endif %}

echo "🔄 Reloading systemd and completing setup..."
systemctl daemon-reexec
systemctl daemon-reload

echo "✅ $SERVICE_NAME installed successfully."